The Startup class:

Optionally includes a ConfigureServices method to configure the app's services. A service is a reusable component that provides app functionality. Services are configured—also described as registered—in ConfigureServices and consumed across the app via dependency injection (DI) or ApplicationServices.
Includes a Configure method to create the app's request processing pipeline.

ConfigureServices and Configure are called by the ASP.NET Core runtime when the app starts:

The Startup class is specified when the app's host is built. 

The host provides services that are available to the Startup class constructor. 
The app adds additional services via ConfigureServices. 
Both the host and app services are available in Configure and throughout the app.

Only the following service types can be injected into the Startup constructor when using IHostBuilder:
IWebHostEnvironment
IHostEnvironment
IConfiguration

Each middleware component in the request pipeline is responsible for
invoking the next component in the pipeline or short-circuiting the chain

Configure services without Startup
To configure services and the request processing pipeline without using a Startup class,
call ConfigureServices and Configure convenience methods on the host builder. 
If multiple Configure method calls exist, the last Configure call is used.

To configure middleware at the beginning or end of an app's Configure 
middleware pipeline without an explicit call to Use{Middleware}. 
IStartupFilter is used by ASP.NET Core to add defaults to the beginning of the pipeline without 
having to make the app author explicitly register the default middleware. 

Each IStartupFilter can add one or more middlewares in the request pipeline. 
The filters are invoked in the order they were added to the service container. 
Filters may add middleware before or after passing control to the next filter, 
thus they append to the beginning or end of the app pipeline.




